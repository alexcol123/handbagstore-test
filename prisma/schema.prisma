// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts Account[]
  orders   Order[]
  reviews  Review[]
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  previousPrice Float?        @default(0)
  brand         String
  category      String
  inStock       Int
  color         String?
  isOnSale      OnSale        @default(no)
  size          String?
  measurements  String?
  images        imageFormat[]

  adminProductCostAndExpenses Float   @default(0)
  showInStore                 Boolean @default(true)

  reviews Review[]
}

model Review {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  productId String?  @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product? @relation(fields: [productId], references: [id])
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  userId          String             @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  DeliveryStatusEnum @default(pending)
  createdDate     DateTime           @default(now())
  paymentIntentId String             @unique
  products        CartProductType[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Banner {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  heading String
  text    String
  url     String
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  brand       String
  selectedImg String
  quantity    Int
  price       Float
  size        String
}

// type Image {
//   image String
// }

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

type imageFormat {
  image   String
  preview String
  path    String
}

enum Role {
  USER
  ADMIN
}

enum OnSale {
  no
  sale
  clearance
}

enum DeliveryStatusEnum {
  pending
  dispatched
  delivered
  returned
}
